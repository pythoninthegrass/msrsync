#!/usr/bin/env python

# Copyright 2017 Jean-Baptiste Denis <jbd@jbdenis.net>
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
# This file includes a copy of the BSD licensed options.py file from the bup project

VERSION = '20250810'
DEFAULT_RSYNC_OPTIONS = "-aS --numeric-ids"

import argparse
import contextlib
import gzip
import humanize
import itertools
import multiprocessing
import os
import random
import shlex
import shutil
import signal
import subprocess
import sys
import sysrsync
import tempfile
import threading
import time
import timeit
import traceback
from multiprocessing.managers import SyncManager
from pathlib import Path

RSYNC_EXE = "rsync"  # Compatibility - sysrsync handles actual detection
(
    EOPTION_PARSER,
    EBUCKET_DIR_NOEXIST,
    EBUCKET_DIR_PERMS,
    EBUCKET_DIR_OSERROR,
    EBUCKET_FILE_CREATE,
    EBIN_NOTFOUND,
    ESRC_NOT_DIR,
    ESRC_NO_ACCESS,
    EDEST_NO_ACCESS,
    EDEST_NOT_DIR,
    ERSYNC_OPTIONS_CHECK,
    ERSYNC_TOO_LONG,
    ERSYNC_JOB,
    ERSYNC_OK,
    EDEST_IS_FILE,
    EDEST_CREATE,
    ENEED_ROOT,
    EMSRSYNC_INTERRUPTED,
) = (97, 11, 12, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26)
(TYPE_RSYNC, TYPE_RSYNC_SENTINEL, MSG_STDERR, MSG_STDOUT, MSG_PROGRESS) = (0, 1, 10, 11, 12)
G_MESSAGES_QUEUE = None


def human_size(value):
    if value.isdigit():
        return int(value)
    if not value[:-1].isdigit():
        return None
    m2s = {'K': 1024, 'M': 1024**2, 'G': 1024**3, 'T': 1024**4, 'P': 1024**5, 'E': 1024**6, 'Z': 1024**7, 'Y': 1024**8}
    size, multiple = int(value[:-1]), value[-1]
    return size * m2s[multiple] if multiple in m2s else None


def print_message(message, output=MSG_STDOUT):
    G_MESSAGES_QUEUE.put({"type": output, "message": message})


def print_update(data):
    sys.stdout.write("\r\x1b[K" + str(data))
    sys.stdout.flush()


class BucketError(RuntimeError):
    pass


def get_human_size(num, power="B"):
    powers = ["B", "K", "M", "G", "T", "P", "E", "Z", "Y"]
    while num >= 1000:
        num /= 1024.0
        power = powers[powers.index(power) + 1]
    return f"{num:.1f} {power}"


def crawl(path, relative=False):
    def onerror(oserror):
        print_message(f"msrsync crawl: {oserror}", MSG_STDERR)

    root_size = len(path) if relative else 0
    for root, dirs, files in os.walk(path, onerror=onerror):
        if not dirs and not files:
            try:
                yield os.lstat(root).st_size, root[root_size:]
            except OSError as err:
                print_message(f"msrsync crawl: {err}", MSG_STDERR)
                continue
        dir_links = [d for d in dirs if os.path.islink(os.path.join(root, d))]
        for name in itertools.chain(files, dir_links):
            try:
                yield os.lstat(os.path.join(root, name)).st_size, os.path.join(root, name)[root_size:]
            except OSError as err:
                print_message(f"msrsync crawl: {err}", MSG_STDERR)


def buckets(path, filesnr, size):
    bucket_files_nr = bucket_size = 0
    bucket, base = [], Path(path).name
    for fsize, rpath in crawl(path, relative=True):
        bucket.append(str(Path(base) / rpath.lstrip(os.sep)))
        bucket_files_nr += 1
        bucket_size += fsize
        if bucket_size >= size or bucket_files_nr >= filesnr:
            yield bucket_files_nr, bucket_size, bucket
            bucket_size = bucket_files_nr = 0
            bucket = []
    if bucket_files_nr > 0:
        yield bucket_files_nr, bucket_size, bucket


def _valid_rsync_options(rsync_opts):
    for opt in rsync_opts.split():
        if opt.startswith("--delete"):
            print("Cannot use --delete option type with msrsync. It would lead to disaster :)", file=sys.stderr)
            sys.exit(97)


class CustomArgumentParser(argparse.ArgumentParser):
    def error(self, message):
        self.print_usage(sys.stderr)
        sys.stderr.write(f'{self.prog}: error: {message}\n')
        sys.exit(97)


def create_parser():
    parser = CustomArgumentParser(
        description="msrsync - parallel rsync wrapper",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  msrsync [options] [--rsync "rsync-options-string"] SRCDIR [SRCDIR2...] DESTDIR
  msrsync --selftest
        """,
    )

    # msrsync options
    parser.add_argument('-p', '--processes', type=int, default=1, help='number of rsync processes to use [1]')
    parser.add_argument('-f', '--files', type=int, default=1000, help='limit buckets to <files> files number [1000]')
    parser.add_argument(
        '-s', '--size', default='1G', help='limit partitions to BYTES size (1024 suffixes: K, M, G, T, P, E, Z, Y) [1G]'
    )
    parser.add_argument('-b', '--buckets', help='where to put the buckets files (default: auto temporary directory)')
    parser.add_argument('-k', '--keep', action='store_true', help='do not remove buckets directory at the end')
    parser.add_argument('-j', '--show', action='store_true', help='show bucket directory')
    parser.add_argument('-P', '--progress', action='store_true', help='show progress')
    parser.add_argument('--stats', action='store_true', help='show additional stats')
    parser.add_argument('-d', '--dry-run', action='store_true', help='do not run rsync processes')
    parser.add_argument('-v', '--version', action='store_true', help='print version')

    # rsync options
    parser.add_argument(
        '-r',
        '--rsync',
        default=DEFAULT_RSYNC_OPTIONS,
        help=f'rsync options as a quoted string ["{DEFAULT_RSYNC_OPTIONS}"]. The "--from0 --files-from=... --quiet --verbose --stats --log-file=..." options will ALWAYS be added, no matter what. Be aware that this will affect all rsync *from/filter files if you want to use them. See rsync(1) manpage for details.',
    )

    # self-test options
    parser.add_argument('-t', '--selftest', action='store_true', help='run the integrated unit and functional tests')

    # positional arguments
    parser.add_argument('paths', nargs='*', help='source directories and destination directory')

    return parser


def parse_cmdline(cmdline_argv):
    parser = create_parser()

    # Handle special case where --rsync is used in old format (MUST be last option)
    if "-r" in cmdline_argv:
        cmdline_argv[cmdline_argv.index("-r")] = "--rsync"

    if "--rsync" in cmdline_argv:
        idx = cmdline_argv.index("--rsync")
        if idx + 1 >= len(cmdline_argv):
            parser.error('You must provide rsync options after --rsync')
        if len(cmdline_argv[idx:]) < 4:
            parser.error('You must provide a source, a destination and eventually rsync options with --rsync')

        # Manually parse the rsync section since argparse gets confused
        pre_rsync_args = cmdline_argv[1:idx]
        rsync_opts = cmdline_argv[idx + 1]
        paths = cmdline_argv[idx + 2 :]

        # First parse the pre-rsync arguments with paths to get other options
        temp_args = pre_rsync_args + paths
        args = parser.parse_args(temp_args)

        # Override the rsync option manually
        args.rsync = rsync_opts
        args.r = rsync_opts

        srcs, dest = paths[:-1], paths[-1]
    else:
        args = parser.parse_args(cmdline_argv[1:])

        # Handle special cases
        if args.version or args.selftest:
            return args, [], ""

        # Validate paths
        if not args.paths or len(args.paths) < 2:
            parser.print_usage()
            sys.exit(0)

        srcs, dest = args.paths[:-1], args.paths[-1]

    # Validate size
    size = human_size(str(args.size))
    if not size:
        parser.error(f"'{args.size}' does not look like a valid size value")
    args.size = args.s = size

    # Validate rsync options
    _valid_rsync_options(args.rsync)

    # Set additional attributes for compatibility
    args.r = args.rsync
    args.f = args.files
    args.compress = False

    return args, srcs, dest


def rmtree_onerror(func, path, exc_info):
    print("Error removing", path, file=sys.stderr)


def write_bucket(filename, bucket, compress=False):
    try:
        fileno, path = filename
        if not compress:
            with os.fdopen(fileno, 'wb') as bfile:
                for entry in bucket:
                    bfile.write((entry + '\0').encode('utf-8', 'surrogateescape'))
        else:
            os.close(fileno)
            with gzip.open(path, 'wb') as bfile:
                for entry in bucket:
                    bfile.write(entry.encode('utf-8', 'surrogateescape'))
    except OSError as err:
        raise BucketError(f"Cannot write bucket file {path}: {err}") from err


def consume_queue(jobs_queue):
    while True:
        item = jobs_queue.get()
        if item is StopIteration:
            return
        yield item


def run(cmd, capture_stdout=False, capture_stderr=False, timeout_sec=sys.maxsize):
    """Compatibility function for tests - simplified subprocess runner"""
    try:
        result = subprocess.run(
            shlex.split(cmd),
            stdout=subprocess.PIPE if capture_stdout else None,
            stderr=subprocess.PIPE if capture_stderr else None,
            timeout=timeout_sec if timeout_sec != sys.maxsize else None,
            text=True,
        )
        return (
            result.returncode,
            result.stdout or "",
            result.stderr or "",
            False,  # timeout flag
            0,      # elapsed time (not tracked)
        )
    except subprocess.TimeoutExpired:
        return -1, "", "Command timed out", True, timeout_sec
    except Exception as err:
        return -1, "", str(err), False, 0


def _check_rsync_options(options):
    """Check rsync options by actually testing them"""
    # Check for dangerous --delete options first
    for opt in shlex.split(options) if options else []:
        if opt.startswith("--delete"):
            print("Cannot use --delete option type with msrsync. It would lead to disaster :)", file=sys.stderr)
            sys.exit(ERSYNC_OPTIONS_CHECK)

    # Test the options by actually running rsync with a dry run
    try:
        with tempfile.TemporaryDirectory() as src_dir, tempfile.TemporaryDirectory() as dst_dir:
            test_opts = shlex.split(options) if options else []
            test_opts.extend(['--dry-run', '--quiet'])

            result = sysrsync.run(source=src_dir, destination=dst_dir, options=test_opts, strict=False, verbose=False)

            if result.returncode != 0:
                print(f'Error during rsync options check ("{options}"): rsync returned {result.returncode}', file=sys.stderr)
                sys.exit(ERSYNC_OPTIONS_CHECK)

    except Exception as err:
        print(f'Error during rsync options check ("{options}"): {err}', file=sys.stderr)
        sys.exit(ERSYNC_OPTIONS_CHECK)


def run_rsync(files_from, rsync_opts, src, dest, timeout=3600 * 24 * 7):
    return run_rsync_tracked(files_from, rsync_opts, src, dest, None, timeout)


def run_rsync_tracked(files_from, rsync_opts, src, dest, proc_tracker, timeout=3600 * 24 * 7):
    rsync_log = files_from + '.log'
    rsync_result = dict(rcode=-1, msg=None, cmdline="", log=rsync_log)

    try:
        starttime = time.time()

        # Parse rsync options into list
        options = shlex.split(rsync_opts) if rsync_opts else []
        # Add required msrsync options
        options.extend(['--quiet', '--verbose', '--stats', '--from0', f'--files-from={files_from}', f'--log-file={rsync_log}'])

        # Use sysrsync to run the command
        result = sysrsync.run(
            source=src,
            destination=dest,
            options=options,
            strict=False,   # Don't raise exception on non-zero exit
            verbose=False,  # We handle our own logging
        )

        elapsed = time.time() - starttime
        rsync_result.update(rcode=result.returncode, elapsed=elapsed, cmdline=f"rsync {' '.join(options)} {src} {dest}")

        if result.returncode != 0:
            rsync_result["errcode"] = ERSYNC_JOB

    except Exception as err:
        rsync_result.update(errcode=ERSYNC_JOB, msg=str(err))

    return rsync_result


def rsync_worker(jobs_queue, monitor_queue, options, dest):
    # Process tracker not needed with sysrsync
    current_rsync_proc = {"proc": None}

    def worker_signal_handler(signum, frame):
        # Note: sysrsync handles process management, but we still need signal handling
        sys.exit(1)

    signal.signal(signal.SIGINT, worker_signal_handler)
    signal.signal(signal.SIGTERM, worker_signal_handler)
    try:
        for src, files_from, bucket_files_nr, bucket_size in consume_queue(jobs_queue):
            rsync_result = (
                dict(rcode=0, elapsed=0, errcode=0, msg='')
                if options.dry_run
                else run_rsync_tracked(files_from, options.rsync, src, dest, current_rsync_proc)
            )
            monitor_queue.put(
                {
                    "type": TYPE_RSYNC,
                    "rsync_result": rsync_result,
                    "size": bucket_size,
                    "files_nr": bucket_files_nr,
                    "jq_size": jobs_queue.qsize(),
                }
            )
    except (KeyboardInterrupt, SystemExit):
        pass
    finally:
        try:
            jobs_queue.put(StopIteration)
            monitor_queue.put({"type": TYPE_RSYNC_SENTINEL, "pid": os.getpid()})
        except (OSError, BrokenPipeError, ConnectionResetError, EOFError):
            pass


def handle_rsync_error_result(rsync_result, messages_queue):
    msg = rsync_result["msg"] or ''
    try:
        match rsync_result["errcode"]:
            case code if code == ERSYNC_TOO_LONG:
                messages_queue.put(
                    {
                        "type": MSG_STDERR,
                        "message": f"rsync command took too long and has been killed (see '{rsync_result['log']}' rsync log file): {msg}\n{rsync_result['cmdline']}",
                    }
                )
            case code if code == ERSYNC_JOB:
                messages_queue.put(
                    {
                        "type": MSG_STDERR,
                        "message": f"errors during rsync command (see '{rsync_result['log']}' rsync log file): {msg}\n{rsync_result['cmdline']}",
                    }
                )
            case _:
                messages_queue.put({"type": MSG_STDERR, "message": f"unknown rsync_result status: {rsync_result}"})
    except (OSError, BrokenPipeError, ConnectionResetError, EOFError):
        pass


def rsync_monitor_worker(
    monitor_queue, nb_rsync_processes, total_size, total_files_nr, crawl_time, total_time, options, messages_queue
):
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    signal.signal(signal.SIGTERM, signal.SIG_DFL)
    current_size = current_files_nr = current_elapsed = rsync_runtime = rsync_workers_stops = buckets_nr = rsync_errors = (
        entries_per_second
    ) = bytes_per_second = 0
    try:
        start = timeit.default_timer()
        for result in consume_queue(monitor_queue):
            if result["type"] == TYPE_RSYNC_SENTINEL:
                rsync_workers_stops += 1
                continue
            if result["type"] != TYPE_RSYNC:
                with contextlib.suppress(OSError, BrokenPipeError, ConnectionResetError, EOFError):
                    messages_queue.put(
                        {
                            "type": MSG_STDERR,
                            "message": f"rsync_monitor_worker process received an incompatile type message: {result}",
                        }
                    )
                continue
            rsync_result = result["rsync_result"]
            if rsync_result["rcode"] != 0:
                rsync_errors += 1
                handle_rsync_error_result(rsync_result, messages_queue)
                continue
            buckets_nr += 1
            current_size += result["size"]
            current_files_nr += result["files_nr"]
            rsync_runtime += result["rsync_result"]["elapsed"]
            current_elapsed = timeit.default_timer() - start
            bytes_per_second = current_size / current_elapsed if current_elapsed > 0 else 0
            entries_per_second = current_files_nr / current_elapsed if current_elapsed > 0 else 0
            if options.progress:
                with contextlib.suppress(OSError, BrokenPipeError, ConnectionResetError, EOFError):
                    messages_queue.put(
                        {
                            "type": MSG_PROGRESS,
                            "message": f"[{current_files_nr}/{total_files_nr.value} entries] [{get_human_size(current_size)}/{get_human_size(total_size.value)} transferred] [{entries_per_second} entries/s] [{get_human_size(bytes_per_second)}/s bw] [monq {monitor_queue.qsize()}] [jq {result['jq_size']}]",
                        }
                    )
        if rsync_errors > 0:
            with contextlib.suppress(OSError, BrokenPipeError, ConnectionResetError, EOFError):
                messages_queue.put(
                    {
                        "type": MSG_STDERR,
                        "message": "\nmsrsync error: somes files/attr were not transferred (see previous errors)",
                    }
                )
        stats = dict(
            errors=rsync_errors,
            total_size=total_size.value,
            total_entries=total_files_nr.value,
            buckets_nr=buckets_nr,
            bytes_per_second=bytes_per_second,
            entries_per_second=entries_per_second,
            rsync_workers=nb_rsync_processes,
            rsync_runtime=rsync_runtime,
            crawl_time=crawl_time.value,
            total_time=total_time.value,
        )
        with contextlib.suppress(OSError, BrokenPipeError, ConnectionResetError, EOFError):
            monitor_queue.put(stats)
    except (KeyboardInterrupt, SystemExit):
        pass


def messages_worker(options, messages_queue):
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    signal.signal(signal.SIGTERM, signal.SIG_DFL)
    last_msg_type = cur_msg_type = None
    try:
        for result in consume_queue(messages_queue):
            newline = os.linesep if last_msg_type == MSG_PROGRESS else ''
            cur_msg_type = result["type"]
            match cur_msg_type:
                case msg_type if msg_type == MSG_PROGRESS:
                    print_update(result["message"])
                case msg_type if msg_type == MSG_STDOUT:
                    print(newline + result["message"], file=sys.stdout)
                case msg_type if msg_type == MSG_STDERR:
                    print(newline + result["message"], file=sys.stderr)
                case _:
                    print(newline + f"Unknown message type '{cur_msg_type}': {result}", file=sys.stderr)
            last_msg_type = cur_msg_type
    except (KeyboardInterrupt, SystemExit):
        pass
    finally:
        if last_msg_type == MSG_PROGRESS:
            print('', file=sys.stdout)


def start_rsync_workers(jobs_queue, monitor_queue, options, dest):
    processes = [
        multiprocessing.Process(target=rsync_worker, args=(jobs_queue, monitor_queue, options, dest))
        for _ in range(options.processes)
    ]
    for p in processes:
        p.start()
    return processes


def start_rsync_monitor_worker(
    monitor_queue, nb_rsync_processes, total_size, total_files_nr, crawl_time, total_time, options, messages_queue
):
    proc = multiprocessing.Process(
        target=rsync_monitor_worker,
        args=(monitor_queue, nb_rsync_processes, total_size, total_files_nr, crawl_time, total_time, options, messages_queue),
    )
    proc.start()
    return proc


def start_messages_worker(options, messages_queue):
    proc = multiprocessing.Process(target=messages_worker, args=(options, messages_queue))
    proc.start()
    return proc


def multiprocess_mgr_init():
    signal.signal(signal.SIGINT, signal.SIG_IGN)


def show_stats(msrsync_stat):
    s = msrsync_stat
    status = "SUCCESS" if s["errors"] == 0 else f"FAILURE, {s['errors']} rsync processe(s) had errors"
    buckets_nr = s["buckets_nr"]
    print("Status:", status)
    print("Working directory:", os.getcwd())
    print("Command line:", " ".join(sys.argv))
    print(f"Total size: {get_human_size(s['total_size'])}")
    print(f"Total entries: {s['total_entries']}")
    print(f"Buckets number: {buckets_nr}")
    if buckets_nr > 0:
        print(f"Mean entries per bucket: {int((s['total_entries'] * 1.0) / buckets_nr)}")
        print(f"Mean size per bucket: {get_human_size((s['total_size'] * 1.0) / buckets_nr)}")
    print(f"Entries per second: {s['entries_per_second']:.0f}")
    print(f"Speed: {get_human_size(s['bytes_per_second'])}/s")
    print(f"Rsync workers: {s['rsync_workers']}")
    print(f"Total rsync's processes ({buckets_nr}) cumulative runtime: {s['rsync_runtime']:.1f}s")
    print(f"Crawl time: {s['crawl_time']:.1f}s ({100 * s['crawl_time'] / s['total_time']:.1f}% of total runtime)")
    print(f"Total time: {s['total_time']:.1f}s")


def msrsync(options, srcs, dest):
    global G_MESSAGES_QUEUE
    try:
        if not options.buckets:
            options.buckets = tempfile.mkdtemp(prefix="msrsync-")
        else:
            if not os.path.exists(options.buckets):
                print(options.buckets, "bucket directory does not exist.", file=sys.stderr)
                sys.exit(EBUCKET_DIR_NOEXIST)
            if not os.access(options.buckets, os.W_OK):
                print(options.buckets, "bucket directory is not writable.", file=sys.stderr)
                sys.exit(EBUCKET_DIR_PERMS)
            options.buckets = tempfile.mkdtemp(prefix="msrsync-", dir=options.buckets)
    except OSError as err:
        print(f'Error with bucket directory creation: "{err}"', file=sys.stderr)
        sys.exit(EBUCKET_DIR_OSERROR)
    if options.show:
        print("buckets dir is", options.buckets)
    manager = SyncManager()
    manager.start()

    def signal_handler(signum, frame):
        raise KeyboardInterrupt()

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    total_size, total_files_nr, crawl_time, total_time = (
        manager.Value('i', 0),
        manager.Value('i', 0),
        manager.Value('f', 0),
        manager.Value('f', 0),
    )
    monitor_queue, jobs_queue = manager.Queue(), manager.Queue()
    G_MESSAGES_QUEUE = manager.Queue()
    rsync_workers_procs = start_rsync_workers(jobs_queue, monitor_queue, options, dest)
    rsync_monitor_worker_proc = start_rsync_monitor_worker(
        monitor_queue, options.processes, total_size, total_files_nr, crawl_time, total_time, options, G_MESSAGES_QUEUE
    )
    messages_worker_proc = start_messages_worker(options, G_MESSAGES_QUEUE)
    crawl_start = timeit.default_timer()
    try:
        total_size.value = bucket_nr = 0
        for src in srcs:
            head, tail = os.path.split(src)
            src_base = os.getcwd() if head == '' else head
            for bucket_files_nr, bucket_size, bucket in buckets(src, options.files, options.s):
                total_size.value += bucket_size
                total_files_nr.value += bucket_files_nr
                bucket.sort()
                d1s = str(bucket_nr / 1024).zfill(8)
                try:
                    tdir = os.path.join(options.buckets, d1s[:4], d1s[4:])
                    os.path.exists(tdir) or os.makedirs(tdir)
                    fileno, filename = tempfile.mkstemp(dir=tdir)
                except OSError as err:
                    print_message(f'msrsync scan: cannot create temporary bucket file: "{err}"', MSG_STDERR)
                    continue
                write_bucket((fileno, filename), bucket, options.compress)
                bucket_nr += 1
                jobs_queue.put((src_base, filename, bucket_files_nr, bucket_size))
        crawl_time.value = timeit.default_timer() - crawl_start
        jobs_queue.put(StopIteration)
        for worker in rsync_workers_procs:
            worker.join()
        total_time.value = timeit.default_timer() - crawl_start
        monitor_queue.put(StopIteration)
        rsync_monitor_worker_proc.join()
        G_MESSAGES_QUEUE.put(StopIteration)
        messages_worker_proc.join()
        run_stats = monitor_queue.get()
        if options.stats:
            show_stats(run_stats)
        return run_stats["errors"]
    except (KeyboardInterrupt, SystemExit):
        print("\nInterrupted! Terminating processes...", file=sys.stderr)
        sys.stdout.flush()
        sys.stderr.flush()
        original_stderr = sys.stderr
        with open(os.devnull, 'w') as devnull:
            sys.stderr = devnull
            try:
                for worker in rsync_workers_procs:
                    worker.terminate()
                rsync_monitor_worker_proc.terminate()
                messages_worker_proc.terminate()
                for worker in rsync_workers_procs:
                    worker.join(timeout=2.0)
                    worker.is_alive() and worker.kill()
                rsync_monitor_worker_proc.join(timeout=2.0)
                rsync_monitor_worker_proc.is_alive() and rsync_monitor_worker_proc.kill()
                messages_worker_proc.join(timeout=2.0)
                messages_worker_proc.is_alive() and messages_worker_proc.kill()
            finally:
                sys.stderr = original_stderr
        return EMSRSYNC_INTERRUPTED
    except BucketError as err:
        print(err, file=sys.stderr)
    except Exception:
        print("Uncaught exception:" + os.linesep + traceback.format_exc(), file=sys.stderr)
    finally:
        manager.shutdown()
        options.buckets is not None and not options.keep and shutil.rmtree(options.buckets, onerror=rmtree_onerror)


def _check_executables():
    """Check if rsync is available - sysrsync will handle binary detection"""
    try:
        sysrsync.get_rsync_command(source=".", destination=".")
    except Exception as err:
        print(f"Cannot find 'rsync' executable or sysrsync error: {err}", file=sys.stderr)
        sys.exit(EBIN_NOTFOUND)


def _check_srcs_dest(srcs, dest):
    for src in srcs:
        src_path = Path(src)
        if not src_path.is_dir():
            print(f"Source '{src}' is not a directory", file=sys.stderr)
            sys.exit(ESRC_NOT_DIR)
        if not os.access(src, os.R_OK | os.X_OK):
            print(f"No access to source directory '{src}'", file=sys.stderr)
            sys.exit(ESRC_NO_ACCESS)

    dest_path = Path(dest)
    if not dest_path.exists():
        try:
            dest_path.mkdir()
        except OSError as err:
            print(f"Error creating destination directory '{dest}': {err}", file=sys.stderr)
            sys.exit(EDEST_CREATE)
    if dest_path.is_file():
        print(f"Destination '{dest}' already exists and is a file", file=sys.stderr)
        sys.exit(EDEST_IS_FILE)
    if dest_path.is_dir() and not os.access(dest, os.W_OK | os.X_OK):
        print(f"Destination directory '{dest}' not writable", file=sys.stderr)
        sys.exit(EDEST_NO_ACCESS)


def _create_level_entries(cwd, max_entries, files_pct):
    dirs, files_nr = [], 0
    for _ in range(random.randint(0, max_entries)):
        if random.randint(1, 100) <= files_pct:
            fhandle, _ = tempfile.mkstemp(dir=cwd)
            os.close(fhandle)
            files_nr += 1
        else:
            dirs.append(tempfile.mkdtemp(dir=cwd))
    return files_nr + len(dirs), dirs


def _create_fake_tree(cwd, total_entries, max_entries_per_level, max_depth, files_pct):
    dir_queue, curr_entries_number, root_len = [cwd], 0, len(cwd)
    while curr_entries_number < total_entries:
        if not dir_queue:
            dir_queue.append(cwd)
        cur = dir_queue.pop()
        if cur[root_len:].count(os.sep) >= max_depth:
            continue
        entries_to_create = total_entries - curr_entries_number
        max_entries = entries_to_create if entries_to_create < max_entries_per_level else max_entries_per_level
        entries, dirs = _create_level_entries(cur, max_entries, files_pct)
        curr_entries_number += entries
        dir_queue.extend(dirs)
    return curr_entries_number


def _compare_trees(first, second):
    first_list = sorted([cur for _, cur in crawl(first, relative=True)])
    second_list = sorted([cur for _, cur in crawl(second, relative=True)])
    return first_list == second_list


def selftest():
    test_runner_path = os.path.join(os.path.dirname(__file__), 'tests', 'run_tests.py')
    if os.path.exists(test_runner_path):
        subprocess.call([sys.executable, test_runner_path])
    else:
        print("Test runner not found at:", test_runner_path, file=sys.stderr)
        print("Please run tests manually from the tests directory", file=sys.stderr)


def main(cmdline):
    options, srcs, dest = parse_cmdline(cmdline)
    if options.version:
        print(f"{VERSION}", file=sys.stdout)
        sys.exit(0)
    if options.selftest:
        selftest()
        sys.exit(0)
    _check_executables()
    _check_srcs_dest(srcs, dest)
    _check_rsync_options(options.rsync)
    return msrsync(options, srcs, dest)


if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv))
    except KeyboardInterrupt:
        print("\nInterrupted by user", file=sys.stderr)
        sys.exit(EMSRSYNC_INTERRUPTED)
    except SystemExit:
        raise
